- add default values for cfgs after hard boot.
- implement the git clean op.
	then see that we really can't build from clean.
	fix all so that we could:
		- default values for cfgs.
- implement showerrorsfor tui command with completion of node names.
- implement showoutputfor tui command with completion of node names.
- look at how a full build looks.
	Do you see the numbers running not in straight lines?
	fix this...:)
- create new template node which does similar stuff to the docbook stuff.
	rewrite the docbook stuff using the template stuff.
- create porcelain for ts://allfiles which will act
	as the default.
	do roughly what I do in the pdmt.py file.
- start building distribution capabilities into the system.
	rsync to other machines
	and issue remote commands to them.
- do an auto generation example.
	A single file that generates multiple c output files
	which then get compiled.
	The extra edges for the node will not be in the general edges collection
	of the graph but rather will be special, attached edges.
- make each node decalre the resources that it generates.
	Most file nodes have one file that they generate
	but some are different (ts, cfg, and I can think
	of nodes which will have multiple files).
	What is the advantage of this?
	I will be able to list all files that were build (for
	instance).
	I will be able to check that all resources were built
	after the "build" method ends. Currently I do this
	only for single files.
	I could do clean without going through the nodes.
- do a soft config system which is better than the current one.
	this means for pdmt itself and not for the products.
	this means that when a config value changes it is pdmt
	that changes it's behaviour but there is no need to
	rebuild anything.
	allow to change these soft configs at runtime.
	make these config declarative as well with descriptions.
	* LONG TODO ITEM
- declarative configs
	each plugin will decleratively say which config
	it is using a static method. add descriptions to these
	configs.
	start with the compiler and linker which will declare
	their own configs.
	We need this as we want to be able to show all plugins
	and config
	enable to see all plugins on the tui.
	enable to see all configs of every plugin in the tui.
- start thinking about flavours of compilation and how
	to solve the flavour problem.
	push this to the user. Don't worry - we will have procelain.
	make the user do a loop and add object per flavour which
	depends on the parameters of the flavour.
	and the same for the executables.
	create porcelain for this.
- do a zip node
	it only updates the files which are really updated.
	show how this could be done easily with pdmt.
	look at the zip.txt notes file I have for how to do this.
	we need to think about what happens when the graph changes
	and a file goes away.
- do a tar node
	In the documentation state that since updating
	specific files in tar archives is impossible without
	a lot of overhead then we just create the entire tar archive.
- do a filesystem interface module.
	one with caching and one without.
	hook pdmt to one or the other according to config.
	It should know about existing/nonexisting files,
		modification times and in the future
		perhaps globs and directory entries as well.
- in the tui do: blabla
	see the error message.
	fix this to be nicer.
- start working on h files.
	write a node which is dependant on a c node.
	it scans the C node (in python code with no pre-processor)
	and writes the results to disk with it's own date.
	It uses an gdbm for that.
	Any object file which is created from the C node will be
	dependant on that node as well.
	It also creates h file nodes for all of the files that it
	finds and connects the newly created node to those h files.
	on update of the C file it:
		- removes the old edges that it created,
		- removed any h files nodes that they are connected to
		if they are deduced files and their ref-count is 0.
		(introduce the idea of deduced nodes).
		- rescan the file and create h nodes and the like.
	this is very similar to auto generated files.
- do "tsemach" like plugins.
	give a name to such things.
	document them. 
	they have two parts to their running.
	one part can create new nodes in the graph and connect them.
	the other knows how to build those nodes.
	do a sample of this
		a config file with names of c files in it.
		we want to create all those files (one build method)
		we want to depend on the date of the config file.
		we want to link all of the outputs into a library.
	remember that when we run the "create nodes" part of the plugin
	we must remove all previous nodes.
- start building porcelain over the API to make it easier for users to use.
	I should get to a situation where the pdmt.py file is REALLY
	REALLY easy to understand.
- allow to build all nodes of a type from the command line.
	the idea is to have a prn like "type://objectfile".
	will this be a real node that all object files will point to?
	This seems like a clean solution but will have RAM issues.
	This could be achieved by writing one listener and registering it.
- operations and parameters.
	operations (like "print dot graph") should be able to get parameters
	These parameters could be supplied from the command line.
	That will make operations much more powerful.
- move all remaining operations to nodes.
- in the bash auto-complete if we hit "file[TAB]" then we see completions with ONLY
	what is after the TAB. Weird. Fix it.

- use pdmt in linuxapi and see how it goes.
- use pdmt in fastlog and see how it goes.

- in the index.php.mako file use better variables (for the name of the apt site for instance).
- change the name of the apt machine to apt.veltzer.net
	and make sure I can access it.
- remove the makot folder and see pdmt crash.
	fix it

- add scanners that know about dependencies between nodes.
	handle errors in scanners.
- create the deb package as part of pdmt (with dependencies)
- define installation of the package as depending on the deb package.

- get ridd of setup.py (it should a part of the module that knows how to create
	the deb package).
- add the code from myrepo to create a repository.
- add hooks to pdmt to enable commands with no relation to the graph.
	hook the commands in reprepro to them.
- get ridd of the makefile by adding:
	pdmt clean hooks.
		- one hook to remove all files of a certain extension.
		- one hook to remove a set of folders recursivly.
- add mako suppport in pdmt and create a website for it.

- make the reprepro script a pdmt plugin.

core
====
- the todo list generation is not very effective.
	it is asked using the "in" operator alot and it is a list - better make it an ordered set.
		(it does have order).
	actually - the todo list should be a tree since it does have dependencies and the tree structure
	could be used for parallelism.
		(find an algorithm for that).
- what happens if I touch an object file. that is very weird. think about it.

website for the project
=======================
- create a site using mako for templating.
	(make install to install the site).
- bring a python documentation tool and create documentation out of the source code.
	install that documentation onto the site.
