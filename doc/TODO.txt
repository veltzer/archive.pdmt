- think about phony targets.
	Should they not store their timestamps in some db?
	If they do then I will not see them get built.
	I think this approach will be better than the current
	one.
	Allow both.
	Create timestamp (ts://all) which will be like
	phony but will store it's last modified time
	in a persistant hash table.
	use that instead of the phony targets.
- do "tsemach" like plugins.
	they have two parts to their running.
	one part can create new nodes in the graph and connect them.
	the other knows how to build those nodes.
	do a sample of this
		a config file with names of c files in it.
		we want to create all those files (one build method)
		we want to depend on the date of the config file.
		we want to link all of the outputs into a library.
	remember that when we run the "create nodes" part of the plugin
	we must remove all previous nodes.
- start building porcelain over the API to make it easier for users to use.
	I should get to a situation where the pdmt.py file is REALLY
	REALLY easy to understand.
- do pdmt.py operations://clean and see the output.
	It does not go through the standard printer class.
	It is not obvious that the messages are coming from pdmt.
	show if files are really removed or not (that's good output).
- look at unlinksoft. It's performance is horrible since
	it may be called a lot when the file is not there
	(pdmt.py operations://clean followed by pdmt.py operations://clean).
	It needs to check if the file is there and only then do the unlink.
	Time it and have a module with timings.
- allow to build all nodes of a type from the command line.
	the idea is to have a prn like "type://objectfile".
	will this be a real node that all object files will point to?
	This seems like a clean solution but will have RAM issues.
	This could be achieved by writing one listener and registering it.
- operations and parameters.
	operations (like "print dot graph") should be able to get parameters
	These parameters could be supplied from the command line.
	That will make operations much more powerful.
- move all remaining operations to nodes.
- in the bash auto-complete if we hit "file[TAB]" then we see completions with ONLY
	what is after the TAB. Weird. Fix it.

- use pdmt in linuxapi and see how it goes.
- use pdmt in fastlog and see how it goes.

- in the index.php.mako file use better variables (for the name of the apt site for instance).
- change the name of the apt machine to apt.veltzer.net
	and make sure I can access it.
- remove the makot folder and see pdmt crash.
	fix it

- add scanners that know about dependencies between nodes.
	handle errors in scanners.
- create the deb package as part of pdmt (with dependencies)
- define installation of the package as depending on the deb package.

- get ridd of setup.py (it should a part of the module that knows how to create
	the deb package).
- add the code from myrepo to create a repository.
- add hooks to pdmt to enable commands with no relation to the graph.
	hook the commands in reprepro to them.
- get ridd of the makefile by adding:
	pdmt clean hooks.
		- one hook to remove all files of a certain extension.
		- one hook to remove a set of folders recursivly.
- add mako suppport in pdmt and create a website for it.

- make the reprepro script a pdmt plugin.

core
====
- the todo list generation is not very effective.
	it is asked using the "in" operator alot and it is a list - better make it an ordered set.
		(it does have order).
	actually - the todo list should be a tree since it does have dependencies and the tree structure
	could be used for parallelism.
		(find an algorithm for that).
- what happens if I touch an object file. that is very weird. think about it.

website for the project
=======================
- create a site using mako for templating.
	(make install to install the site).
- bring a python documentation tool and create documentation out of the source code.
	install that documentation onto the site.
