What type of graph should we use?
=================================
- seems like a directed graph is the right choice (direction matters in dependency).
- there is also a "hypergraph" where one edge can connect many. python-pygraph supports
it. Maybe we should use that ?!?

Event handlers:
===============
- are pieces of code that can run pre/post node/edge addition/removal.
- they get a handle to the mgr object when they do and the relevant data
	(node or edge in question and event type).
* should a "pre" handler be allowed to prevent the addition/removal of node/edge?
	it looks like a good idea.

What is in charge of the build?
===============================
The idea is that the node knows how to build itself.
	A source node.
		- reports that it is always up to date if the file exists.
		- when asked to build generates a build error.
			that tells the use that he/she must supply the node externally.
	A C object node:
		- reports that it is up to date according to dates of files.
		- when asked to build it runs the compiler.

Builders:
=========
- a builder is something that builds multiple nodes from multiple nodes.

When to check if everything is up to date?
==========================================
- when the user wants.
- when some event arrives (file has changed).

How to decide if something is up to date?
=========================================
- depth first traverse the whole graph.
- on each node ask the node if it is up to date.
- each node will have a uptodate checker attached to it when it is
	constructed.
- one updatedate checker will be the default (get a list of nodes
	and check the files).
- when a file is found not to be uptodate it is added to a "not up to date" list.

Avoiding cycles:
================
- the python-graph package has a method to find cycles. This should be activated
on edge addition and on edge addition only as it is the only modification that
has a chance of closing a cycle. If the new edge will close the cycle then it
is removed and an error is thrown.
- maybe in the future we will have a more efficient cycle detection whereby the
previous cycle detection algorithms will help the new edge addition to do it
cycle checking faster.

Is a node a source node or not?
===============================
This goes out to the philosophical notion of what a source node is.
A source node in pdmt is simply a node that cannot build itself.
It is not, as some people may assume, a file with a .c extension or some
such because a library or object file may well be a source.

Implementation:
The idea is that each node will declare a "canBuild" attribute and source nodes
will return False on it.

TODO: stop having sourcefilenode

An error handling system:
=========================
An object that contains errors must be created. Any node which encounters
errors can submit errors and warnings to that object. The node can then
clear all errors FOR ITSELF ONLY via that object.
Error object may have line numbers, file number and more.

Cleaning:
=========
- how do I clean stuff?
	The idea is that clean will be an automatic feature.
	Any node which is not a source node could be cleaned by calling its clean method.
		all files will inherit the clean method which simply removes the file.
	I want to be able to see all stuff which is being cleaned and also see how many files
		are being cleaned.
- should clean be a node?
	no it should not. Why? because, unlike building, the order of clean is not important.
	The whole purpose of holding stuff in node and edges and in a graph is so that graph
	topology would matter and in the case of clean graph topology DOES NOT matter.
- I may want to clean only subfolder. This means that I may wish to run the "clean" command
	only on a subgraph of the entire graph. Enable an easy API to do that (call a command
	on a subset of the graph).

Integration with source control management systems
==================================================
At first stage we will just take the source file list from the source control system.
I will first integrate with a file system walker and then with git.
This way I will not need to actually put the file names into the mgr but just tell it
to scan.
I could also add a black list feature of stuff that should not be taken as source files.
	(how about a mark INSIDE the file saying that it is not a source file?)

Node which represents a list of folders
=======================================
Sometimes we want a node that represents a folder.
Examples: doxygen generates two folders full of documentation (html and latex)
	In that case building doxygen is a dependency between all source files in the project
	and these two folders.
This special node would:
	- on clean recursivly remove all folders.
	- would say that the files in those folders belong to it.
	- would put .gitignore tags on these folders ?!?
subclasses of this node could implement doxygen and other similar stuff.

Node types:
===========
The main question in this respect is whether or nodes nodes should have
types?
Advantages:
- I could ask:
	- how many nodes of type "c++" are there?
	- show me all nodes of type "h"
- I could create policies like: don't allow files in this folder
	include files from that folder.
- I could differentiate between rebuilding a node because of h file
	change as opposed to source file change as opposed to compiler version
	change.
Disadvantages:
- should every node have just one type? is that enough? Maybe a node should
	have a collection of tags associated with it?

Should we have a map of sets by which we could quicly get all nodes of a certain
type?
================================================================================
Maybe in the future if we see a need for it. Currently no such need arises and the
performance hit of scanning all the nodes is not noticeble so no such map is maintained.

parameters:
===========
- The idea is that paramters are nodes within the graph.
	Why is that? To avoid the need to rebuild all nodes once any paramter
	is changed. Lets say I change a -O2 to -O3 for just one object file it
	does not require rebuilding the whole graph, just that node and dependant nodes.
- a special object to handle (read) all parameters will be made. Each paramters should
	have a date associated with it. That is how we will determine if the output from
	it needs to be rebuilt.
- how will the parameters be stored.
	they can be stored in a special folder called "parameters" where each parameter
	will be stored in it's own file with the mod time of that file as the time stamp.
	later other types of stores (RDMBS) could be added.

names of nodes:
===============
we need to have a prn (Pdmt Resource Name).
For instance:
	pdmt.py --build file://out/my.elf
would build one executable file.
	pdmt.py --build type://c_exe
would build all c executables
